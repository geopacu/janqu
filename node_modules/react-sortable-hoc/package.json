{
  "_args": [
    [
      {
        "raw": "react-sortable-hoc@^0.6.8",
        "scope": null,
        "escapedName": "react-sortable-hoc",
        "name": "react-sortable-hoc",
        "rawSpec": "^0.6.8",
        "spec": ">=0.6.8 <0.7.0",
        "type": "range"
      },
      "D:\\EGADE\\20.Tesis\\repositorio\\janqu\\node_modules\\netlify-cms"
    ]
  ],
  "_from": "react-sortable-hoc@>=0.6.8 <0.7.0",
  "_id": "react-sortable-hoc@0.6.8",
  "_inCache": true,
  "_location": "/react-sortable-hoc",
  "_nodeVersion": "6.9.4",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-sortable-hoc-0.6.8.tgz_1506707153472_0.3605909710749984"
  },
  "_npmUser": {
    "name": "clauderic",
    "email": "clauderic.d@gmail.com"
  },
  "_npmVersion": "5.3.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-sortable-hoc@^0.6.8",
    "scope": null,
    "escapedName": "react-sortable-hoc",
    "name": "react-sortable-hoc",
    "rawSpec": "^0.6.8",
    "spec": ">=0.6.8 <0.7.0",
    "type": "range"
  },
  "_requiredBy": [
    "/netlify-cms"
  ],
  "_resolved": "https://registry.npmjs.org/react-sortable-hoc/-/react-sortable-hoc-0.6.8.tgz",
  "_shasum": "b08562f570d7c41f6e393fca52879d2ebb9118e9",
  "_shrinkwrap": null,
  "_spec": "react-sortable-hoc@^0.6.8",
  "_where": "D:\\EGADE\\20.Tesis\\repositorio\\janqu\\node_modules\\netlify-cms",
  "author": {
    "name": "Clauderic Demers",
    "email": "me@ced.io"
  },
  "bugs": {
    "url": "https://github.com/clauderic/react-sortable-hoc/issues"
  },
  "dependencies": {
    "babel-runtime": "^6.11.6",
    "invariant": "^2.2.1",
    "lodash": "^4.12.0",
    "prop-types": "^15.5.7"
  },
  "description": "Set of higher-order components to turn any list into a sortable, touch-friendly, animated list",
  "devDependencies": {
    "@kadira/storybook": "^1.36.0",
    "@kadira/storybook-deployer": "^1.0.0",
    "autoprefixer": "^6.3.6",
    "babel-cli": "^6.9.0",
    "babel-core": "^6.3.15",
    "babel-eslint": "^7.1.1",
    "babel-loader": "^6.2.0",
    "babel-plugin-css-modules-transform": "^0.1.0",
    "babel-plugin-transform-object-assign": "^6.8.0",
    "babel-plugin-transform-runtime": "^6.15.0",
    "babel-polyfill": "^6.3.14",
    "babel-preset-es2015": "^6.3.13",
    "babel-preset-es2015-rollup": "^1.1.1",
    "babel-preset-react": "^6.3.13",
    "babel-preset-react-hmre": "^1.1.1",
    "babel-preset-stage-0": "^6.5.0",
    "babel-preset-stage-1": "^6.5.0",
    "babel-preset-stage-2": "^6.5.0",
    "babel-register": "^6.3.13",
    "classnames": "^2.2.5",
    "cross-env": "^1.0.7",
    "css-loader": "^0.23.1",
    "eslint": "^3.16.1",
    "eslint-config-react-app": "^0.6.1",
    "eslint-plugin-flowtype": "^2.21.0",
    "eslint-plugin-import": "^2.0.1",
    "eslint-plugin-jsx-a11y": "^4.0.0",
    "eslint-plugin-react": "^6.4.1",
    "express": "^4.13.3",
    "extract-text-webpack-plugin": "^1.0.1",
    "html-webpack-plugin": "^2.16.1",
    "isparta-loader": "^2.0.0",
    "node-libs-browser": "^0.5.2",
    "node-sass": "^3.7.0",
    "postcss-loader": "^0.9.1",
    "qs": "^6.2.0",
    "raw-loader": "^0.5.1",
    "react": "^15.4.2",
    "react-addons-pure-render-mixin": "^15.0.2",
    "react-addons-shallow-compare": "^15.1.0",
    "react-addons-test-utils": "^15.1.0",
    "react-dom": "^15.4.2",
    "react-infinite": "^0.9.2",
    "react-tiny-virtual-list": "^2.0.1",
    "react-virtualized": "^9.2.2",
    "redux": "^3.5.2",
    "rimraf": "^2.5.2",
    "sass-loader": "^3.2.0",
    "stack-source-map": "^1.0.4",
    "style-loader": "^0.13.1",
    "webpack": "^1.9.11",
    "webpack-dashboard": "^0.2.1",
    "webpack-dev-middleware": "^1.2.0",
    "webpack-hot-middleware": "^2.9.1",
    "yargs": "^4.7.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-sUUAtNdV84AKZ2o+F5lVOOFWcyWG6aGDkNFgHoieB1zFLeWLWENkix06asPS4/GhigfuRh06aZix1j3Qx8+NSQ==",
    "shasum": "b08562f570d7c41f6e393fca52879d2ebb9118e9",
    "tarball": "https://registry.npmjs.org/react-sortable-hoc/-/react-sortable-hoc-0.6.8.tgz"
  },
  "gitHead": "84bfae8595f7be49357cc464b51954c92f4bd549",
  "homepage": "https://github.com/clauderic/react-sortable-hoc",
  "jsnext:main": "dist/es6/index.js",
  "keywords": [
    "react",
    "reactjs",
    "react-component",
    "sortable",
    "sortable-list",
    "list",
    "sortable list",
    "smooth",
    "animated",
    "hoc",
    "higher-order",
    "component"
  ],
  "license": "MIT",
  "main": "dist/commonjs/index.js",
  "maintainers": [
    {
      "name": "clauderic",
      "email": "clauderic.d@gmail.com"
    }
  ],
  "name": "react-sortable-hoc",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "^0.14.0 || ^15.0.0 || ^16.0.0",
    "react-dom": "^0.14.0 || ^15.0.0 || ^16.0.0"
  },
  "readme": "# React Sortable (HOC)\n> A set of higher-order components to turn any list into an animated, touch-friendly, sortable list.\n\n[![npm version](https://img.shields.io/npm/v/react-sortable-hoc.svg)](https://www.npmjs.com/package/react-sortable-hoc)\n[![npm downloads](https://img.shields.io/npm/dm/react-sortable-hoc.svg)](https://www.npmjs.com/package/react-sortable-hoc)\n[![license](https://img.shields.io/github/license/mashape/apistatus.svg?maxAge=2592000)](https://github.com/clauderic/react-sortable-hoc/blob/master/LICENSE)\n[![Gitter](https://badges.gitter.im/clauderic/react-sortable-hoc.svg)](https://gitter.im/clauderic/react-sortable-hoc)\n![gzip size](http://img.badgesize.io/https://npmcdn.com/react-sortable-hoc/dist/umd/react-sortable-hoc.min.js?compression=gzip)\n\n### Examples available here: <a href=\"#\">http://clauderic.github.io/react-sortable-hoc/</a>\n\n<a href=\"https://app.codesponsor.io/link/oN9PDWZz8fQcbh9sxpDEUvD5/clauderic/react-sortable-hoc\" rel=\"nofollow\"><img src=\"https://app.codesponsor.io/embed/oN9PDWZz8fQcbh9sxpDEUvD5/clauderic/react-sortable-hoc.svg\" style=\"width: 888px; height: 68px;\" alt=\"Sponsor\" /></a>\n\nFeatures\n---------------\n* **Higher Order Components** â€“ Integrates with your existing components\n* **Drag handle, auto-scrolling, locked axis, events, and more!**\n* **Suuuper smooth animations** â€“ Chasing the 60FPS dream ðŸŒˆ\n* **Works with virtualization libraries: [react-virtualized](https://github.com/bvaughn/react-virtualized/), [react-tiny-virtual-list](https://github.com/clauderic/react-tiny-virtual-list), [react-infinite](https://github.com/seatgeek/react-infinite), etc.**\n* **Horizontal lists, vertical lists, or a grid** â†” â†• â¤¡\n* **Touch support** ðŸ‘Œ\n\nInstallation\n------------\n\nUsing [npm](https://www.npmjs.com/package/react-sortable-hoc):\n\n\t$ npm install react-sortable-hoc --save\n\n\nThen, using a module bundler that supports either CommonJS or ES2015 modules, such as [webpack](https://github.com/webpack/webpack):\n\n```js\n// Using an ES6 transpiler like Babel\nimport {SortableContainer, SortableElement} from 'react-sortable-hoc';\n\n// Not using an ES6 transpiler\nvar Sortable = require('react-sortable-hoc');\nvar SortableContainer = Sortable.SortableContainer;\nvar SortableElement = Sortable.SortableElement;\n```\n\nAlternatively, an UMD build is also available:\n```html\n<script src=\"react-sortable-hoc/dist/umd/react-sortable-hoc.js\"></script>\n```\n\nUsage\n------------\n### Basic Example\n\n```js\nimport React, {Component} from 'react';\nimport {render} from 'react-dom';\nimport {SortableContainer, SortableElement, arrayMove} from 'react-sortable-hoc';\n\nconst SortableItem = SortableElement(({value}) =>\n  <li>{value}</li>\n);\n\nconst SortableList = SortableContainer(({items}) => {\n  return (\n    <ul>\n      {items.map((value, index) => (\n        <SortableItem key={`item-${index}`} index={index} value={value} />\n      ))}\n    </ul>\n  );\n});\n\nclass SortableComponent extends Component {\n  state = {\n    items: ['Item 1', 'Item 2', 'Item 3', 'Item 4', 'Item 5', 'Item 6'],\n  };\n  onSortEnd = ({oldIndex, newIndex}) => {\n    this.setState({\n      items: arrayMove(this.state.items, oldIndex, newIndex),\n    });\n  };\n  render() {\n    return <SortableList items={this.state.items} onSortEnd={this.onSortEnd} />;\n  }\n}\n\nrender(<SortableComponent/>, document.getElementById('root'));\n```\nThat's it! React Sortable does not come with any styles by default, since it's meant to enhance your existing components.\n\nMore code examples are available [here](https://github.com/clauderic/react-sortable-hoc/blob/master/examples/).\n\nWhy should I use this?\n--------------------\nThere are already a number of great Drag & Drop libraries out there (for instance, [react-dnd](https://github.com/gaearon/react-dnd/) is fantastic). If those libraries fit your needs, you should definitely give them a try first. However, most of those libraries rely on the HTML5 Drag & Drop API, which has some severe limitations. For instance, things rapidly become tricky if you need to support touch devices, if you need to lock dragging to an axis, or want to animate the nodes as they're being sorted. React Sortable HOC aims to provide a simple set of higher-order components to fill those gaps. If you're looking for a dead-simple, mobile-friendly way to add sortable functionality to your lists, then you're in the right place.\n\n### Prop Types\n\n#### SortableContainer HOC\n| Property                   | Type              | Default                                                                                                    | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                            |\n|:---------------------------|:------------------|:-----------------------------------------------------------------------------------------------------------|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| axis                       | String            | `y`                                                                                                        | Items can be sorted horizontally, vertically or in a grid. Possible values: `x`, `y` or `xy`                                                                                                                                                                                                                                                                                                                                                                           |\n| lockAxis                   | String            |                                                                                                            | If you'd like, you can lock movement to an axis while sorting. This is not something that is possible with HTML5 Drag & Drop                                                                                                                                                                                                                                                                                                                                           |\n| helperClass                | String            |                                                                                                            | You can provide a class you'd like to add to the sortable helper to add some styles to it                                                                                                                                                                                                                                                                                                                                                                              |\n| transitionDuration         | Number            | `300`                                                                                                      | The duration of the transition when elements shift positions. Set this to `0` if you'd like to disable transitions                                                                                                                                                                                                                                                                                                                                                     |\n| pressDelay                 | Number            | `0`                                                                                                        | If you'd like elements to only become sortable after being pressed for a certain time, change this property. A good sensible default value for mobile is `200`. Cannot be used in conjunction with the `distance` prop.                                                                                                                                                                                                                                                |\n| pressThreshold             | Number            | `5`                                                                                                        | Number of pixels of movement to tolerate before ignoring a press event.                                                                                                                                                                                                                                                                                                                                                                                                |\n| distance                   | Number            | `0`                                                                                                        | If you'd like elements to only become sortable after being dragged a certain number of pixels. Cannot be used in conjunction with the `pressDelay` prop.                                                                                                                                                                                                                                                                                                               |\n| shouldCancelStart          | Function          | [Function](https://github.com/clauderic/react-sortable-hoc/blob/master/src/SortableContainer/index.js#L48) | This function get's invoked before sorting begins, and can be used to programatically cancel sorting before it begins. By default, it will cancel sorting if the event target is either an `input`, `textarea`, `select` or `option`.                                                                                                                                                                                                                                  |\n| onSortStart                | Function          |                                                                                                            | Callback that get's invoked when sorting begins. `function({node, index, collection}, event)`                                                                                                                                                                                                                                                                                                                                                                          |\n| onSortMove                 | Function          |                                                                                                            | Callback that get's invoked during sorting as the cursor moves. `function(event)`                                                                                                                                                                                                                                                                                                                                                                                      |\n| onSortEnd                  | Function          |                                                                                                            | Callback that get's invoked when sorting ends. `function({oldIndex, newIndex, collection}, e)`                                                                                                                                                                                                                                                                                                                                                                         |\n| useDragHandle              | Boolean           | `false`                                                                                                    | If you're using the `SortableHandle` HOC, set this to `true`                                                                                                                                                                                                                                                                                                                                                                                                           |\n| useWindowAsScrollContainer | Boolean           | `false`                                                                                                    | If you want, you can set the `window` as the scrolling container                                                                                                                                                                                                                                                                                                                                                                                                       |\n| hideSortableGhost          | Boolean           | `true`                                                                                                     | Whether to auto-hide the ghost element. By default, as a convenience, React Sortable List will automatically hide the element that is currently being sorted. Set this to false if you would like to apply your own styling.                                                                                                                                                                                                                                           |\n| lockToContainerEdges       | Boolean           | `false`                                                                                                    | You can lock movement of the sortable element to it's parent `SortableContainer`                                                                                                                                                                                                                                                                                                                                                                                       |\n| lockOffset                 | `OffsetValue`\\* \\ | [`OffsetValue`\\*, `OffsetValue`\\*]                                                                         | `\"50%\"` | When `lockToContainerEdges` is set to `true`, this controls the offset distance between the sortable helper and the top/bottom edges of it's parent `SortableContainer`. Percentage values are relative to the height of the item currently being sorted. If you wish to specify different behaviours for locking to the *top* of the container vs the *bottom*, you may also pass in an `array` (For example: `[\"0%\", \"100%\"]`).                            |\n| getContainer               | Function          |                                                                                                            | Optional function to return the scrollable container element. This property defaults to the `SortableContainer` element itself or (if `useWindowAsScrollContainer` is true) the window. Use this function to specify a custom container object (eg this is useful for integrating with certain 3rd party components such as `FlexTable`). This function is passed a single parameter (the `wrappedInstance` React element) and it is expected to return a DOM element. |\n| getHelperDimensions        | Function          | [Function](https://github.com/clauderic/react-sortable-hoc/blob/master/src/SortableContainer/index.js#L58) | Optional `function({node, index, collection})` that should return the computed dimensions of the SortableHelper. See [default implementation](https://github.com/clauderic/react-sortable-hoc/blob/master/src/SortableContainer/index.js#L58) for more details                                                                                                                                                                                                         |\n\n\\* `OffsetValue` can either be a finite `Number` or a `String` made up of a number and a unit (`px` or `%`).\nExamples: `10` (which is the same as `\"10px\"`), `\"50%\"`\n\n#### SortableElement HOC\n| Property   | Type             | Default | Required? | Description                                                                                                                                                                                                                               |\n|:-----------|:-----------------|:--------|:---------:|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| index      | Number           |         |     âœ“     | This is the element's sortableIndex within it's collection. This prop is required.                                                                                                                                                        |\n| collection | Number or String | `0`     |           | The collection the element is part of. This is useful if you have multiple groups of sortable elements within the same `SortableContainer`. [Example](http://clauderic.github.io/react-sortable-hoc/#/basic-configuration/multiple-lists) |\n| disabled   | Boolean          | `false` |           | Whether the element should be sortable or not                                                                                                                                                                                             |\n\nFAQ\n---------------\n### Running Examples\n\nIn root folder:\n\n```\n\t$ npm install\n\t$ npm run storybook\n```\n\n### Grid support\nNeed to sort items in a grid? We've got you covered! Just set the `axis` prop to `xy`. Grid support is currently limited to a setup where all the cells in the grid have the same width and height, though we're working hard to get variable width support in the near future.\n\n### Item disappearing when sorting / CSS issues\nUpon sorting, `react-sortable-hoc` creates a clone of the element you are sorting (the _sortable-helper_) and appends it to the end of the `<body>` tag. The original element will still be in-place to preserve its position in the DOM until the end of the drag (with inline-styling to make it invisible). If the _sortable-helper_ gets messed up from a CSS standpoint, consider that maybe your selectors to the draggable item are dependent on a parent element which isn't present anymore (again, since the _sortable-helper_ is at the end of the `<body>`). This can also be a `z-index` issue, for example, when using `react-sortable-hoc` within a Bootstrap modal, you'll need to increase the `z-index` of the SortableHelper so it is displayed on top of the modal (see [#87](https://github.com/clauderic/react-sortable-hoc/issues/87) for more details).\n\n### Click events being swallowed\nBy default, `react-sortable-hoc` is triggered immediately on `mousedown`. If you'd like to prevent this behaviour, there are a number of strategies readily available. You can use the `distance` prop to set a minimum distance (in pixels) to be dragged before sorting is enabled. You can also use the `pressDelay` prop to add a delay before sorting is enabled. Alternatively, you can also use the [SortableHandle](https://github.com/clauderic/react-sortable-hoc/blob/master/src/SortableHandle/index.js) HOC.\n\n### Wrapper props not passed down to wrapped Component\nAll props for `SortableContainer` and `SortableElement` listed above are intentionally consumed by the wrapper component and are **not** passed down to the wrapped component. To make them available pass down the desired prop again with a different name. E.g.:\n\n```js\nconst SortableItem = SortableElement(({value, sortIndex}) =>\n  <li>{value} - #{sortIndex}</li>\n);\n\nconst SortableList = SortableContainer(({items}) => {\n  return (\n    <ul>\n      {items.map((value, index) => (\n        <SortableItem \n          key={`item-${index}`}\n          index={index}\n          sortIndex={index}\n          value={value} \n        />\n      ))}\n    </ul>\n  );\n});\n```\n\nDependencies\n------------\nReact Sortable List has very few dependencies. It depends on `invariant` and a handful of `lodash` helpers. It has the following peerDependencies: `react`, `react-dom`\n\nReporting Issues\n----------------\nIf believe you've found an issue, please [report it](https://github.com/clauderic/react-sortable-hoc/issues) along with any relevant details to reproduce it. The easiest way to do so is to fork this [jsfiddle](https://jsfiddle.net/clauderic/6r7r2cva/).\n\nAsking for help\n----------------\nPlease do not use the issue tracker for personal support requests. Instead, use [Gitter](https://gitter.im/clauderic/react-sortable-hoc) or StackOverflow.\n\nContributions\n------------\nYes please! Feature requests / pull requests are welcome.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/clauderic/react-sortable-hoc.git"
  },
  "scripts": {
    "build": "npm run build:commonjs && npm run build:es6 && npm run build:umd",
    "build:commonjs": "npm run clean:commonjs && cross-env BABEL_ENV=commonjs babel src --out-dir dist/commonjs --ignore *.example.js,*.test.js",
    "build:es6": "npm run clean:es6 && cross-env BABEL_ENV=es6 BABEL_DISABLE_CACHE=1 babel src --out-dir dist/es6 --ignore *.test.js",
    "build:umd": "cross-env NODE_ENV=production webpack --config webpack.config.umd.js && cross-env NODE_ENV=production webpack --config webpack.config.umd.js --minify",
    "clean": "npm run clean:umd",
    "clean:commonjs": "rimraf dist/commonjs",
    "clean:es6": "rimraf dist/es6",
    "clean:umd": "rimraf dist/umd",
    "start": "webpack-dashboard -- node server.js",
    "storybook": "start-storybook -p 9001",
    "test": "eslint src/** --ext .js"
  },
  "user": "clauderic",
  "version": "0.6.8",
  "xo": {
    "esnext": true,
    "extends": "xo-react"
  }
}
