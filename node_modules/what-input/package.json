{
  "_args": [
    [
      {
        "raw": "what-input@^5.0.3",
        "scope": null,
        "escapedName": "what-input",
        "name": "what-input",
        "rawSpec": "^5.0.3",
        "spec": ">=5.0.3 <6.0.0",
        "type": "range"
      },
      "D:\\EGADE\\20.Tesis\\repositorio\\janqu\\node_modules\\netlify-cms"
    ]
  ],
  "_from": "what-input@>=5.0.3 <6.0.0",
  "_id": "what-input@5.0.5",
  "_inCache": true,
  "_location": "/what-input",
  "_nodeVersion": "6.11.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/what-input_5.0.5_1518025227630_0.8555855192764104"
  },
  "_npmUser": {
    "name": "ten1seven",
    "email": "jeremy@ten1seven.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "what-input@^5.0.3",
    "scope": null,
    "escapedName": "what-input",
    "name": "what-input",
    "rawSpec": "^5.0.3",
    "spec": ">=5.0.3 <6.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/netlify-cms"
  ],
  "_resolved": "https://registry.npmjs.org/what-input/-/what-input-5.0.5.tgz",
  "_shasum": "6f5fd14baef0354cae7c3ceaa949886a86a456d9",
  "_shrinkwrap": null,
  "_spec": "what-input@^5.0.3",
  "_where": "D:\\EGADE\\20.Tesis\\repositorio\\janqu\\node_modules\\netlify-cms",
  "author": {
    "name": "Jeremy Fields",
    "email": "jeremy.fields@viget.com"
  },
  "bugs": {
    "url": "https://github.com/ten1seven/what-input/issues"
  },
  "dependencies": {},
  "description": "A global utility for tracking the current input method (mouse, keyboard or touch).",
  "devDependencies": {
    "autoprefixer": "^6.7.7",
    "babel-core": "^6.23.1",
    "babel-loader": "^6.3.2",
    "babel-preset-env": "^1.6.0",
    "browser-sync": "^2.18.13",
    "css-mqpacker": "^5.0.1",
    "del": "2.2.0",
    "gulp": "3.9.1",
    "gulp-concat": "2.6.0",
    "gulp-cssnano": "^2.1.2",
    "gulp-gh-pages": "^0.5.4",
    "gulp-header": "1.7.1",
    "gulp-notify": "2.2.0",
    "gulp-plumber": "1.1.0",
    "gulp-postcss": "^6.4.0",
    "gulp-rename": "1.2.2",
    "gulp-sass": "^3.1.0",
    "gulp-sass-glob": "^1.0.8",
    "gulp-sourcemaps": "^2.6.0",
    "gulp-standard": "^8.0.4",
    "gulp-uglify": "^2.0.0",
    "run-sequence": "1.1.5",
    "webpack-stream": "3.2.0"
  },
  "directories": {},
  "dist": {
    "shasum": "6f5fd14baef0354cae7c3ceaa949886a86a456d9",
    "tarball": "https://registry.npmjs.org/what-input/-/what-input-5.0.5.tgz",
    "fileCount": 21,
    "unpackedSize": 258086
  },
  "gitHead": "d6aeda7f643b1663c5cf1ea30302095a3584ee52",
  "homepage": "https://github.com/ten1seven/what-input",
  "keywords": [
    "accessibility",
    "a11y",
    "input",
    "javascript"
  ],
  "license": "MIT",
  "main": "dist/what-input.js",
  "maintainers": [
    {
      "name": "ten1seven",
      "email": "jeremy@ten1seven.com"
    }
  ],
  "name": "what-input",
  "optionalDependencies": {},
  "readme": "# What Input?\n\n**A global utility for tracking the current input method (mouse, keyboard or touch).**\n\n## What Input is now v5\n\nNow with more information and less opinion!\n\nWhat Input adds data attributes to the `window` based on the type of input being used. It also exposes a simple API that can be used for scripting interactions.\n\n## How it works\n\nWhat Input uses event bubbling on the `window` to watch for mouse, keyboard and touch events (via `mousedown`, `keydown` and `touchstart`). It then sets or updates a `data-whatinput` attribute.\n\nPointer Events are supported but note that `pen` inputs are remapped to `touch`.\n\nWhat Input also exposes a tiny API that allows the developer to ask for the current input, set custom ignore keys, and set and remove custom callback functions.\n\n_What Input does not make assumptions about the input environment before the page is interacted with._ However, the `mousemove` and `pointermove` events are used to set a `data-whatintent=\"mouse\"` attribute to indicate that a mouse is being used _indirectly_.\n\n## Demo\n\nCheck out the demo to see What Input in action.\n\nhttps://ten1seven.github.io/what-input\n\n### Interacting with Forms\n\nSince interacting with a form _always_ requires use of the keyboard, What Input uses the `data-whatintent` attribute to display a \"buffered\" version of input events while form `<input>`s, `<select>`s, and `<textarea>`s are being interacted with (i.e. mouse user's `data-whatintent` will be preserved as `mouse` while typing).\n\n## Installing\n\nDownload the file directly.\n\nInstall via Yarn:\n\n```shell\nyarn add what-input\n```\n\nInstall via NPM:\n\n```shell\nnpm install what-input\n```\n\n## Usage\n\nInclude the script directly in your project.\n\n```html\n<script src=\"path/to/what-input.js\"></script>\n```\n\nOr require with a script loader.\n\n```javascript\nimport 'what-input'\n\n// or\n\nimport whatInput from 'what-input'\n\n// or\n\nrequire('what-input')\n\n// or\n\nvar whatInput = require('what-input')\n\n// or\n\nrequirejs.config({\n  paths: {\n    whatInput: 'path/to/what-input'\n  }\n})\n\nrequire(['whatInput'], function() {})\n```\n\nWhat Input will start doing its thing while you do yours.\n\n### Basic Styling\n\n```css\n/*\n * only suppress the focus ring once what-input has successfully started\n */\n\n/* suppress focus ring on form controls for mouse users */\n[data-whatintent='mouse'] *:focus {\n  outline: none;\n}\n```\n\n**Note:** If you remove outlines with `outline: none;`, be sure to provide clear visual `:focus` styles so the user can see which element they are on at any time for greater accessibility. Visit [W3C's WCAG 2.0 2.4.7 Guideline](https://www.w3.org/TR/UNDERSTANDING-WCAG20/navigation-mechanisms-focus-visible.html) to learn more.\n\n### Scripting\n\n#### Current Input\n\nAsk What Input what the current input method is. This works best if asked after the events What Input is bound to (`mousedown`, `keydown` and `touchstart`).\n\n```javascript\nwhatInput.ask() // returns `mouse`, `keyboard` or `touch`\n\nmyButton.addEventListener('click', () => {\n  if (whatInput.ask() === 'mouse') {\n    // do mousy things\n  } else if (whatInput.ask() === 'keyboard') {\n    // do keyboard things\n  }\n})\n```\n\nIf it's necessary to know if `mousemove` is being used, use the `'intent'` option. For example:\n\n```javascript\n/*\n * nothing has happened but the mouse has moved\n */\n\nwhatInput.ask() // returns `initial` because the page has not been directly interacted with\nwhatInput.ask('intent') // returns `mouse` because mouse movement was detected\n\n/*\n * the keyboard has been used, then the mouse was moved\n */\n\nwhatInput.ask() // returns `keyboard` because the keyboard was the last direct page interaction\nwhatInput.ask('intent') // returns `mouse` because mouse movement was the most recent action detected\n```\n\n### Current Element\n\nAsk What Input the currently focused DOM element.\n\n```javascript\nwhatInput.element() // returns a string, like `input` or null\n```\n\n#### Ignore Keys\n\nSet a custom array of [keycodes](http://keycode.info/) that will be ignored (will not switch over to `keyboard`) when pressed. _A custom list will overwrite the default values._\n\n```javascript\n/*\n * default ignored keys:\n * 16, // shift\n * 17, // control\n * 18, // alt\n * 91, // Windows key / left Apple cmd\n * 93  // Windows menu / right Apple cmd\n */\n\nwhatInput.ignoreKeys([1, 2, 3])\n```\n\n#### Custom Callbacks\n\nFire a function when the input or intent changes.\n\n```javascript\n// create a function to be fired\nvar myFunction = function(type) {\n  console.log(type)\n}\n\n// fire `myFunction` when the intent changes\nwhatInput.registerOnChange(myFunction, 'intent')\n\n// fire `myFunction` when the input changes\nwhatInput.registerOnChange(myFunction, 'input')\n\n// remove custom event\nwhatInput.unRegisterOnChange(myFunction)\n```\n\n## Compatibility\n\nWhat Input works in all modern browsers. For compatibility with IE8, polyfills are required for:\n\n* addEventListener\n* IndexOf\n\nAdd your own, or grab the bundle included here.\n\n```html\n<!--[if lte IE 8]>\n  <script src=\"lte-IE8.js\"></script>\n<![endif]-->\n```\n\n## Changelog\n\n### v5.0.5\n\n* **Fixed:** Fail gracefully in non-DOM environments.\n\n### v5.0.3\n\n* **Fixed:** Event buffer for touch was not working correctly.\n\n### Changes from v4\n\n* **Added:** A the ability to add and remove custom callback function when the input or intent changes with `whatInput.registerOnChange` and `whatInput.unRegisterOnChange`.\n* **Added:** A `data-whatelement` attribute exposes any currently focused DOM element (i.e. `data-whatelement=\"a\"` or `data-whatelement=\"input\"`).\n* **Added:** A `data-whatclasses` attribute exposes any currently focused element's classes as a comma-separated list (i.e. `data-whatclasses=\"class1,class2\"`).\n* **Added:** An API option to provide a custom array of keycodes that will be ignored.\n* **Changed:** Typing in form fields is no longer filtered out. The `data-whatinput` attribute immediately reflects the current input. The `data-whatintent` attribute now takes on the role of remembering mouse input prior to typing in or clicking on a form field.\n* **Changed:** If you use the Tab key to move from one input to another one - the `data-whatinput` attribute reflects the current input (switches to \"keyboard\").\n* **Removed:** `whatInput.types()` API option.\n* **Removed:** Bower support.\n* **Fixed:** Using mouse modifier keys (`shift`, `control`, `alt`, `cmd`) no longer toggles back to keyboard.\n\n## Acknowledgments\n\nSpecial thanks to [Viget](http://viget.com/) for their encouragement and commitment to open source projects. Visit [code.viget.com](http://code.viget.com/) to see more projects from [Viget](http://viget.com).\n\nThanks to [mAAdhaTTah](https://github.com/mAAdhaTTah) for the initial conversion to Webpack.\n\nWhat Input is written and maintained by [@ten1seven](https://github.com/ten1seven).\n\n## License\n\nWhat Input is freely available under the [MIT License](http://opensource.org/licenses/MIT).\n",
  "readmeFilename": "README.md",
  "repository": {
    "url": "git+https://github.com/ten1seven/what-input.git",
    "type": "git"
  },
  "scripts": {
    "deploy": "gulp deploy",
    "start": "gulp"
  },
  "version": "5.0.5"
}
