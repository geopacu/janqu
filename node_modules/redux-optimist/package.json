{
  "_args": [
    [
      {
        "raw": "redux-optimist@^0.0.2",
        "scope": null,
        "escapedName": "redux-optimist",
        "name": "redux-optimist",
        "rawSpec": "^0.0.2",
        "spec": ">=0.0.2 <0.0.3",
        "type": "range"
      },
      "D:\\EGADE\\20.Tesis\\repositorio\\janqu\\node_modules\\netlify-cms"
    ]
  ],
  "_from": "redux-optimist@>=0.0.2 <0.0.3",
  "_id": "redux-optimist@0.0.2",
  "_inCache": true,
  "_location": "/redux-optimist",
  "_nodeVersion": "4.0.0",
  "_npmUser": {
    "name": "forbeslindesay",
    "email": "forbes@lindesay.co.uk"
  },
  "_npmVersion": "2.14.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "redux-optimist@^0.0.2",
    "scope": null,
    "escapedName": "redux-optimist",
    "name": "redux-optimist",
    "rawSpec": "^0.0.2",
    "spec": ">=0.0.2 <0.0.3",
    "type": "range"
  },
  "_requiredBy": [
    "/netlify-cms"
  ],
  "_resolved": "https://registry.npmjs.org/redux-optimist/-/redux-optimist-0.0.2.tgz",
  "_shasum": "70da17e863c53a8604d581ca20a26908bda1697e",
  "_shrinkwrap": null,
  "_spec": "redux-optimist@^0.0.2",
  "_where": "D:\\EGADE\\20.Tesis\\repositorio\\janqu\\node_modules\\netlify-cms",
  "author": {
    "name": "ForbesLindesay"
  },
  "bugs": {
    "url": "https://github.com/ForbesLindesay/redux-optimist/issues"
  },
  "dependencies": {},
  "description": "Optimistically apply actions that can be later commited or reverted.",
  "devDependencies": {
    "babel": "^5.8.23",
    "babel-istanbul": "^0.3.20",
    "chalk": "^1.1.1",
    "diff": "^2.1.2",
    "testit": "^2.0.2"
  },
  "directories": {},
  "dist": {
    "shasum": "70da17e863c53a8604d581ca20a26908bda1697e",
    "tarball": "https://registry.npmjs.org/redux-optimist/-/redux-optimist-0.0.2.tgz"
  },
  "gitHead": "11e30ad25c96f526ecda7720e19e9d4f8a7b9cd2",
  "homepage": "https://github.com/ForbesLindesay/redux-optimist#readme",
  "keywords": [],
  "license": "MIT",
  "maintainers": [
    {
      "name": "forbeslindesay",
      "email": "forbes@lindesay.co.uk"
    }
  ],
  "name": "redux-optimist",
  "optionalDependencies": {},
  "readme": "# redux-optimist\n\nOptimistically apply actions that can be later commited or reverted.\n\n[![Build Status](https://img.shields.io/travis/ForbesLindesay/redux-optimist/master.svg)](https://travis-ci.org/ForbesLindesay/redux-optimist)\n[![Dependency Status](https://img.shields.io/gemnasium/ForbesLindesay/redux-optimist.svg)](https://gemnasium.com/ForbesLindesay/redux-optimist)\n[![NPM version](https://img.shields.io/npm/v/redux-optimist.svg)](https://www.npmjs.org/package/redux-optimist)\n\n## Installation\n\n    npm install redux-optimist\n\n## Usage\n\n### Step 1: Wrap your top level reducer in redux-optimist\n\n#### `reducers/todos.js`\n\n```js\nexport default function todos(state = [], action) {\n  switch (action.type) {\n  case 'ADD_TODO':\n    return state.concat([action.text]);\n  default:\n    return state;\n  }\n}\n```\n\n#### `reducers/status.js`\n\n```js\nexport default function status(state = {writing: false, error: null}, action) {\n  switch (action.type) {\n  case 'ADD_TODO':\n    return {writing: true, error: null};\n  case 'ADD_TODO_COMPLETE':\n    return {writing: false, error: null};\n  case 'ADD_TODO_FAILED':\n    return {writing: false, error: action.error};\n  default:\n    return state;\n  }\n}\n```\n\n#### `reducers/index.js`\n\n```js\nimport optimist from 'redux-optimist';\nimport { combineReducers } from 'redux';\nimport todos from './todos';\nimport status from './status';\n\nexport default optimist(combineReducers({\n  todos,\n  status\n}));\n```\n\nAs long as your top-level reducer returns a plain object, you can use optimist.  You don't\nhave to use `Redux.combineReducers`.\n\n### Step 2: Mark your optimistic actions with the `optimist` key\n\n#### `middleware/api.js`\n\n```js\nimport {BEGIN, COMMIT, REVERT} from 'optimist';\nimport request from 'then-request';\n\nlet nextTransactionID = 0;\nexport default function (store) {\n  return next => action => {\n    if (action.type !== 'ADD_TODO') {\n      return next(action);\n    }\n    let transactionID = nextTransactionID++;\n    next({\n      type: 'ADD_TODO',\n      text: action.text,\n      optimist: {type: BEGIN, id: transactionID}\n    });\n    request('POST', '/add_todo', {text: action.text}).getBody().done(\n      res => next({\n        type: 'ADD_TODO_COMPLETE',\n        text: action.text,\n        response: res,\n        optimist: {type: COMMIT, id: transactionID}\n      }),\n      err => next({\n        type: 'ADD_TODO_FAILED',\n        text: action.text,\n        error: err,\n        optimist: {type: REVERT, id: transactionID}\n      })\n    );\n  }\n};\n```\n\nNote how we always follow up by either COMMITing the transaction or REVERTing it.  If you do neither, you will get a memory leak.  Also note that we use a serialisable transactionID such as a number.  These should always\nbe unique accross the entire system.\n\n### Step 3:\n\nUsing this, we can safely fire off `ADD_TODO` actions in the knowledge that the UI will update optimisticly, but will revert if the write to the server fails.\n\n`App.js`\n\n```js\nimport { createStore, applyMiddleware } from 'redux';\nimport api from './middleware/api';\nimport reducer from './reducers';\n\nlet store = applyMiddleware(api)(createStore)(reducer);\nconsole.log(store.getState());\n// {\n//   optimist: {...},\n//   todos: [],\n//   status: {writing: false, error: null}\n// }\n\nstore.dispatch({\n  type: 'ADD_TODO',\n  text: 'Use Redux'\n});\nconsole.log(store.getState());\n// {\n//   optimist: {...},\n//   todos: ['Use Redux'],\n//   status: {writing: true, error: null}\n// }\n\n// You can apply other actions here and their updates won't get lost\n// even if the original ADD_TODO action gets reverted.\n\n// Some time later...\nconsole.log(store.getState());\n// either\n// {\n//   optimist: {...},\n//   todos: ['Use Redux'],\n//   status: {writing: false, error: null}\n// }\n// or\n// {\n//   optimist: {...},\n//   todos: [],\n//   status: {writing: false, error: Error}\n// }\n```\n\n## License\n\n  MIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ForbesLindesay/redux-optimist.git"
  },
  "scripts": {
    "build": "babel src --out-dir lib",
    "coverage": "babel-node node_modules/.bin/babel-istanbul cover test/index.js",
    "prepublish": "npm run build",
    "test": "babel-node test/index.js"
  },
  "version": "0.0.2"
}
