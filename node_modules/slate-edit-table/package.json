{
  "_args": [
    [
      {
        "raw": "slate-edit-table@^0.12.0",
        "scope": null,
        "escapedName": "slate-edit-table",
        "name": "slate-edit-table",
        "rawSpec": "^0.12.0",
        "spec": ">=0.12.0 <0.13.0",
        "type": "range"
      },
      "D:\\EGADE\\20.Tesis\\repositorio\\janqu\\node_modules\\netlify-cms"
    ]
  ],
  "_from": "slate-edit-table@>=0.12.0 <0.13.0",
  "_id": "slate-edit-table@0.12.0",
  "_inCache": true,
  "_location": "/slate-edit-table",
  "_nodeVersion": "6.11.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/slate-edit-table-0.12.0.tgz_1509619432587_0.48345589311793447"
  },
  "_npmUser": {
    "name": "soreine",
    "email": "soreine.plume@gmail.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "slate-edit-table@^0.12.0",
    "scope": null,
    "escapedName": "slate-edit-table",
    "name": "slate-edit-table",
    "rawSpec": "^0.12.0",
    "spec": ">=0.12.0 <0.13.0",
    "type": "range"
  },
  "_requiredBy": [
    "/netlify-cms"
  ],
  "_resolved": "https://registry.npmjs.org/slate-edit-table/-/slate-edit-table-0.12.0.tgz",
  "_shasum": "9163e67b8025c3c09d6037eb76cb5e652b65dd47",
  "_shrinkwrap": null,
  "_spec": "slate-edit-table@^0.12.0",
  "_where": "D:\\EGADE\\20.Tesis\\repositorio\\janqu\\node_modules\\netlify-cms",
  "bugs": {
    "url": "https://github.com/GitbookIO/slate-edit-table/issues"
  },
  "dependencies": {},
  "description": "A Slate plugin to handle keyboard events in tables.",
  "devDependencies": {
    "babel-cli": "^6.11.4",
    "babel-core": "^6.11.4",
    "babel-preset-es2015": "^6.9.0",
    "babel-preset-react": "^6.11.1",
    "babelify": "^7.3.0",
    "browserify": "^13.1.0",
    "eslint": "^3.1.1",
    "eslint-config-gitbook": "1.4.0",
    "expect": "^1.20.2",
    "gh-pages": "^0.11.0",
    "http-server": "^0.9.0",
    "immutable": "^3.8.1",
    "mocha": "^3.0.1",
    "react": "^15.3.0",
    "react-dom": "^15.3.0",
    "read-metadata": "^1.0.0",
    "slate": "^0.27.2",
    "slate-react": "^0.6.0",
    "watchify": "^3.7.0"
  },
  "directories": {},
  "dist": {
    "shasum": "9163e67b8025c3c09d6037eb76cb5e652b65dd47",
    "tarball": "https://registry.npmjs.org/slate-edit-table/-/slate-edit-table-0.12.0.tgz"
  },
  "gitHead": "d48e2546381fb5214ebbedefd79b1b470d74f3c3",
  "homepage": "https://github.com/GitbookIO/slate-edit-table#readme",
  "keywords": [
    "slate"
  ],
  "license": "Apache-2.0",
  "main": "./dist/index.js",
  "maintainers": [
    {
      "name": "samypesse",
      "email": "samypesse@gmail.com"
    },
    {
      "name": "zhouzi",
      "email": "hello@gabinaureche.com"
    },
    {
      "name": "soreine",
      "email": "soreine.plume@gmail.com"
    },
    {
      "name": "jpreynat",
      "email": "johan.preynat@gmail.com"
    },
    {
      "name": "aarono",
      "email": "aaron.omullan@gmail.com"
    },
    {
      "name": "gitbook-bot",
      "email": "contact@gitbook.com"
    }
  ],
  "name": "slate-edit-table",
  "optionalDependencies": {},
  "peerDependencies": {
    "immutable": "^3.8.1",
    "slate": "^0.27.2"
  },
  "readme": "# slate-edit-table\n\n[![NPM version](https://badge.fury.io/js/slate-edit-table.svg)](http://badge.fury.io/js/slate-edit-table)\n[![Linux Build Status](https://travis-ci.org/GitbookIO/slate-edit-table.png?branch=master)](https://travis-ci.org/GitbookIO/slate-edit-table)\n\nA Slate plugin to handle table edition.\n\nDemo: [gitbookio.github.io/slate-edit-table/](https://gitbookio.github.io/slate-edit-table/)\n\n### Install\n\n```\nnpm install slate-edit-table\n```\n\n### Features\n\n- Pressing <kbd>Up</kbd> and <kbd>Down</kbd>, move the cursor to next/previous row\n- Pressing <kbd>Enter</kbd>, insert a new row\n- Pressing <kbd>Cmd+Enter</kbd> (<kbd>Ctrl+Enter</kbd> on Windows/Linux) exits the table, into a new default block.\n- Pressing <kbd>Tab</kbd>, move the select to next cell\n- Pressing <kbd>Shift+Tab</kbd>, move the select to previous cell\n\n### Simple Usage\n\n```js\nimport EditTable from 'slate-edit-table'\n\nconst plugins = [\n  EditTable()\n]\n```\n\n#### Arguments\n\n- ``[typeTable: String]`` — type for table\n- ``[typeRow: String]`` — type for the rows.\n- ``[typeCell: String]`` — type for the cells.\n- ``[exitBlockType: String]`` — Mod+Enter will exit the table, into the given block type. Pass `null` to disable this behavior.\n\n### Utilities and Change\n\n`slate-edit-table` exports utilities and changes:\n\n#### `utils.isSelectionInTable`\n\n`plugin.utils.isSelectionInTable(state: State) => boolean`\n\nReturn true if selection is inside a table cell.\n\n#### `utils.getPosition`\n\n`plugin.utils.getPosition(state: State) => TablePosition`\n\nReturns the detailed position in the current table. Throws if not in a table.\n\n#### `changes.insertTable`\n\n`plugin.changes.insertTable(change: Change, columns: ?number, rows: ?number) => Change`\n\nInsert a new empty table.\n\n#### `changes.insertRow`\n\n`plugin.changes.insertRow(change: Change, at: ?number) => Change`\n\nInsert a new row after the current one or at the specific index (`at`).\n\n#### `changes.insertColumn`\n\n`plugin.changes.insertColumn(change: Change, at: ?number) => Change`\n\nInsert a new column after the current one or at the specific index (`at`).\n\n#### `changes.removeTable`\n\n`plugin.changes.removeTable(change: Change) => Change`\n\nRemove current table.\n\n#### `changes.removeRow`\n\n`plugin.changes.removeRow(change: Change, at: ?number) => Change`\n\nRemove current row or the one at a specific index (`at`).\n\n#### `changes.removeColumn`\n\n`plugin.changes.removeColumn(change: Change, at: ?number) => Change`\n\nRemove current column or the one at a specific index (`at`).\n\n#### `changes.moveSelection`\n\n`plugin.changes.moveSelection(change: Change, column: number, row: number) => Change`\n\nMove the selection to a specific position in the table.\n\n#### `changes.moveSelectionBy`\n\n`plugin.changes.moveSelectionBy(change: Change, column: number, row: number) => Change`\n\nMove the selection by the given amount of columns and rows.\n\n#### `changes.setColumnAlign`\n\n`plugin.changes.setColumnAlign(change: Change, align: string, at: number) => Change`\n\nSets column alignment for a given column (`at`), in the current table. `align`\ndefaults to center, `at` is optional and defaults to current cursor position.\n\n> The `align` values are stored in the table node's data.\n> `table.node.data.get('align')` should be an array of aligns, corresponding to\neach column.\n\n### TablePosition\n\nAn instance of `TablePosition` represents a position within a table (row and column).\nYou can get your current position in a table by using `plugin.utils.getPosition(state)`.\n\n#### `position.getWidth() => number`\n\nReturns the number of columns in the current table.\n\n#### `position.getHeight() => number`\n\nReturns the number of rows in the current table.\n\n#### `position.getRowIndex() => number`\n\nReturns the index of the current row in the table.\n\n#### `position.getColumnIndex() => number`\n\nReturn the index of the current column in the table.\n\n#### `position.isFirstCell() => boolean`\n\nTrue if on first row and first column of the table\n\n#### `position.isLastCell() => boolean`\n\nTrue if on last row and last column of the table\n\n#### `position.isFirstRow() => boolean`\n\nTrue if on first row\n\n#### `position.isLastRow() => boolean`\n\nTrue if on last row\n\n#### `position.isFirstColumn() => boolean`\n\nTrue if on first column\n\n#### `position.isLastColumn() => boolean`\n\nTrue if on last column\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/GitbookIO/slate-edit-table.git"
  },
  "scripts": {
    "build-example": "browserify ./example/main.js -o ./example/bundle.js -t [ babelify --presets [ es2015 react ] ]",
    "deploy-example": "npm run build-example; gh-pages -d ./example",
    "lint": "eslint ./",
    "postpublish": "npm run deploy-example",
    "prepublish": "babel ./lib --out-dir ./dist",
    "serve-example": "http-server ./example/ -p 8080",
    "start": "npm run build-example; npm run serve-example",
    "test": "mocha ./tests/*.js --compilers js:babel-register --reporter=list",
    "watch-example": "watchify ./example/main.js -o ./example/bundle.js -t [ babelify --presets [ es2015 react ] ] -v"
  },
  "version": "0.12.0"
}
