{
  "_args": [
    [
      {
        "raw": "tomlify-j0.4@^3.0.0-alpha.0",
        "scope": null,
        "escapedName": "tomlify-j0.4",
        "name": "tomlify-j0.4",
        "rawSpec": "^3.0.0-alpha.0",
        "spec": ">=3.0.0-alpha.0 <4.0.0",
        "type": "range"
      },
      "D:\\EGADE\\20.Tesis\\repositorio\\janqu\\node_modules\\netlify-cms"
    ]
  ],
  "_from": "tomlify-j0.4@>=3.0.0-alpha.0 <4.0.0",
  "_id": "tomlify-j0.4@3.0.0",
  "_inCache": true,
  "_location": "/tomlify-j0.4",
  "_nodeVersion": "9.0.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/tomlify-j0.4-3.0.0.tgz_1509579038108_0.3081868840381503"
  },
  "_npmUser": {
    "name": "jakwings",
    "email": "jakwings@gmail.com"
  },
  "_npmVersion": "5.5.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "tomlify-j0.4@^3.0.0-alpha.0",
    "scope": null,
    "escapedName": "tomlify-j0.4",
    "name": "tomlify-j0.4",
    "rawSpec": "^3.0.0-alpha.0",
    "spec": ">=3.0.0-alpha.0 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/netlify-cms"
  ],
  "_resolved": "https://registry.npmjs.org/tomlify-j0.4/-/tomlify-j0.4-3.0.0.tgz",
  "_shasum": "99414d45268c3a3b8bf38be82145b7bba34b7473",
  "_shrinkwrap": null,
  "_spec": "tomlify-j0.4@^3.0.0-alpha.0",
  "_where": "D:\\EGADE\\20.Tesis\\repositorio\\janqu\\node_modules\\netlify-cms",
  "author": {
    "name": "Jak Wings",
    "email": "jakwings@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/jakwings/tomlify-j0.4/issues"
  },
  "dependencies": {},
  "description": "A Object->TOML encoder/converter only for TOML v0.4.0",
  "devDependencies": {
    "js-yaml": "~3.9.0",
    "mocha": "~3.4.2",
    "should": "~11.2.1",
    "toml-j0.4": "~1.1.0",
    "uglify-js": "~3.0.25"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-2Ulkc8T7mXJ2l0W476YC/A209PR38Nw8PuaCNtk9uI3t1zzFdGQeWYGQvmj2PZkVvRC/Yoi4xQKMRnWc/N29tQ==",
    "shasum": "99414d45268c3a3b8bf38be82145b7bba34b7473",
    "tarball": "https://registry.npmjs.org/tomlify-j0.4/-/tomlify-j0.4-3.0.0.tgz"
  },
  "files": [
    "LICENSE",
    "README.md",
    "CHANGELOG.md",
    "dist/tomlify.min.js",
    "tomlify.js"
  ],
  "gitHead": "ab19c676c65ddd0791e31b1aa77a7f970658f3bd",
  "homepage": "https://github.com/jakwings/tomlify-j0.4",
  "keywords": [
    "toml",
    "tomlify",
    "stringify",
    "encoder",
    "ini",
    "toml-j0.4"
  ],
  "license": "MIT",
  "main": "tomlify.js",
  "maintainers": [
    {
      "name": "jakwings",
      "email": "jakwings@gmail.com"
    }
  ],
  "name": "tomlify-j0.4",
  "optionalDependencies": {},
  "readme": "# TOMLify-j0.4\n\n[![Build Status](https://travis-ci.org/jakwings/tomlify-j0.4.svg)](https://travis-ci.org/jakwings/tomlify-j0.4)\n[![NPM version](https://badge.fury.io/js/tomlify-j0.4.svg)](http://badge.fury.io/js/tomlify-j0.4)\n\nAs its name *TOMLify-j0.4* says, this is a [TOML] v[0.4.0] compliant encoder.\n(JavaScript Object -> TOML text)\n\n[TOML]: https://github.com/toml-lang/toml\n[0.4.0]: https://github.com/toml-lang/toml/blob/master/versions/en/toml-v0.4.0.md\n\n\n### Live Demo\n\n<https://jakwings.github.io/tomlify-j0.4/demo/>\n\nYou can see the result from tomlify-j0.4 in the debug console of your browser.\n\nThe parser used in the demo is [toml-j0.4]\n\n[toml-j0.4]: https://github.com/jakwings/toml-j0.4\n\n\n### Usage\n\nYou can install it via `npm install tomlify-j0.4`, or just include the script\n`tomlify.js` or `dist/tomlify.min.js` in your web pages.\n\n```javascript\nvar tomlify = require('tomlify-j0.4');\n\nvar table = {\n    about: {\n        name: 'tomlify-j0.4',\n        maintainers: ['Jak Wings'],\n        todos: [\n            {\n                done: false,\n                priority: 'important',\n                text: 'Add some test scripts.'\n            },\n            {\n                done: true,\n                priority: 'normal',\n                text: 'Open source this project.'\n            }\n        ]\n    },\n    more: {\n        version: [2, 0, 0],\n        date: new Date('2017-04-14T00:08:00+08:00')\n    }\n};\n\ntry {\n    var text = tomlify.toToml(table, {space: 2});  // indent with 2 spaces\n    /* OUTPUT:\n     * [about]\n     * name = \"tomlify-j0.4\"\n     * maintainers = [\n     *   \"Jak Wings\"\n     * ]\n     *\n     *   [[about.todos]]\n     *   done = false\n     *   priority = \"important\"\n     *   text = \"Add some test scripts.\"\n     *\n     *   [[about.todos]]\n     *   done = true\n     *   priority = \"normal\"\n     *   text = \"Open source this project.\"\n     *\n     * [more]\n     * version = [\n     *   2.0,\n     *   0.0,\n     *   0.0\n     * ]\n     * date = 2017-04-13T16:08:00.000Z\n     */\n    var text = tomlify.toToml(table, {\n        space: '  ',\n        replace: function (key, value) {\n            var context = this;\n            var path = tomlify.toKey(context.path);\n            if (/^more\\.version\\.\\[\\d+\\]$/.test(path)) {\n                return value.toFixed(0);  // Change the text transformed from the value.\n            }\n            if (context.path[0] === 'about' &&\n                context.path[1] === 'todos' &&\n                context.path[2] === 1) {\n                return null;  // Drop one table from the todo array.\n            }\n            return false;  // Let tomlify decide for you.\n        }\n    });\n    /* OUTPUT:\n     * [about]\n     * name = \"tomlify-j0.4\"\n     * maintainers = [\n     *   \"Jak Wings\"\n     * ]\n     *\n     *   [[about.todos]]\n     *   done = false\n     *   priority = \"important\"\n     *   text = \"Add some test scripts.\"\n     *\n     * [more]\n     * version = [\n     *   2,\n     *   0,\n     *   0\n     * ]\n     * date = 2017-04-13T16:08:00.000Z\n     */\n    var text = tomlify.toToml({\n        null: null,\n        undefined: undefined,\n        numbers: [1, 2, null, , 3, 4]\n    });\n    /* OUTPUT:\n     * numbers = [1.0, 2.0, 3.0, 4.0]\n     */\n} catch (err) {\n    // do something\n}\n```\n\n\n### APIs\n\n#### tomlify.toToml(table, options)\n\nUse it to transform a table object into TOML text.\n\n*   `table`: must be an object other than an instance of Array or Date.\n\n    By default, all numbers are transformed into floats and arrays of numbers\n    will become arrays of floats. And `null` or `undefined` in an array or\n    object property whose value is `null` or `undefined` will be ignored. You\n    can change this behavior through `options.replace`.\n\n*   options.replace - `{function(this: Context, key: String|Number, value:Mixed): Mixed}`:\n\n    The function used to change the default text output.\n\n    *   `@this {Context}`:\n        *   `@property {Array.<String|Number>}` path: The key path to current value.\n        *   `@property {Table|Array}` table: The direct parent object.\n    *   `@param {String|Number}` key: The key of the value in current parent object.\n    *   `@param {Mixed}` value: The current value.\n    *   `@return {Mixed}` A string to change the value output, `false` to\n        cancel, `null` or `undefined` to remove the output.\n\n*   options.space - `{String|Number}`:\n\n    Specify the padding string for indentation.\n\n    If it is a non-negative integer N, then use N space \" \" for indentation. If\n    it is a string, then use this string for indentation. Otherwise, no\n    indentation will be performed.\n\n*   options.sort - `{function(a: String, b: String): Number}`:\n\n    The compare function for sorting table keys.\n\n    It is used for `Array.prototype.sort()`.\n\n#### tomlify.toValue(value, options)\n\nJust like `tomlify.toToml(table, options)`, it is used to transform a value into TOML\nvalue for a key-value pair. `value` cannot be null or undefined.\n\nHowever, an inline-table always fits into one line, no matter what it contains.\n\nE.g.\n\n```javascript\ntomlify.toValue({one: 1, two: 2});\n//=> {one = 1.0, two = 2.0}\n\ntomlify.toValue([\"apple\", \"banana\"], {space: 2});\n//=>\n//[\n//  \"apple\",\n//  \"banana\"\n//]\n\ntomlify.toValue([\n  {people: [\"Alice\", \"Bob\"]},\n  {fruits: [\"apple\", \"banana\"]}\n], {space: 2});\n//=>\n//[\n//  {people = [\"Alice\", \"Bob\"]},\n//  {fruits = [\"apple\", \"banana\"]}\n//]\n```\n\n#### tomlify.toKey(path, alternative)\n\n*   path - `{String|Array.<String|Number>}`: A key or a key path.\n*   alternative - `{Boolean}`: Whether numbers in the key path will be ignored.\n\nUse it to get a TOML key or key path for the key-value pair. E.g.\n\n```javascript\ntomlify.toKey('money');  //=> money\ntomlify.toKey('$');      //=> \"$\"\n\ntomlify.toKey(['sir', 'Mr. Smith']);        //=> sir.\"Mr. Smith\"\ntomlify.toKey(['food', 0, 'price']);        //=> food.[0].price\ntomlify.toKey(['food', 0, 'price'], true);  //=> food.price\n```\n\n\n### Known Problems\n\n*   JavaScript does not have any integer type.\n\n    All numbers are floats in JavaScript. Any integer bigger than\n    Number.MAX_SAFE_INTEGER (9007199254740991 < 2^63 - 1) or smaller than\n    Number.MIN_SAFE_INTEGER (-9007199254740991 > -(2^63 - 1)) is not safe when\n    being converted or used as a pure integer! You should store big integers in\n    strings.\n\n    All numbers are transformed into floats by default. You can change this\n    behavior by using a replacer function with tomlify-j0.4.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/jakwings/tomlify-j0.4.git"
  },
  "scripts": {
    "dist": "uglifyjs --verbose --compress --mangle -o dist/tomlify.min.js tomlify.js",
    "prepare": "npm run dist",
    "test": "mocha --bail --reporter min test/*.js"
  },
  "version": "3.0.0"
}
